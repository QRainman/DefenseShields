<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="EnvDTE" #> 
<#@ assembly name="EnvDTE80" #> 
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="EnvDTE80" #>
<#@ output extension=".cs" #>

<#
    var dte = (this.Host as IServiceProvider).GetService(typeof(DTE)) as DTE;
    var project = dte.Solution.FindProjectItem(this.Host.TemplateFile).ContainingProject;

    var namespaceQueue = new Queue<CodeNamespace>();
    foreach (CodeElement e in project.CodeModel.CodeElements)
        if (e.Kind == vsCMElement.vsCMElementNamespace && e.FullName.StartsWith(YourNamespacePrefix))
            namespaceQueue.Enqueue((CodeNamespace) e);
    
    var elementQueue = new Queue<CodeElement>();
    while (namespaceQueue.Count > 0) {
        CodeNamespace vrm = namespaceQueue.Dequeue();
        foreach (CodeElement c in vrm.Members)
            if (c.Kind == vsCMElement.vsCMElementNamespace)
                namespaceQueue.Enqueue((CodeNamespace) c);
            else
                elementQueue.Enqueue(c);
    }

	var endpointMap = new Dictionary<string, KeyValuePair<string, CodeFunction>>();

    while (elementQueue.Count > 0) {
        var element = elementQueue.Dequeue();
        if (element.IsCodeType) {
            var ctype = (CodeType) element;
            foreach (CodeElement m in ctype.Members)
                elementQueue.Enqueue(m);
        } else {
			CodeElements attributes = null;
			CodeType parentType = null;
			bool isShared = false;
			if (element.Kind == vsCMElement.vsCMElementFunction)
			{
				var cf = (CodeFunction) element;
				attributes = cf.Attributes;
				parentType = (CodeType) cf.Parent;
				isShared = cf.IsShared;
			}
			/*else if (element.Kind == vsCMElement.vsCMElementEvent)
			{
				var ce = (CodeEvent) element;
				attributes = ce.Attributes;
				parentType = (CodeType) ce.Parent;
				isShared = ce.IsShared;
			} else if (element.Kind == vsCMElement.vsCMElementProperty)
			{
				var cp = (CodeProperty) element;
				attributes = cp.Attributes;
				parentType = (CodeType) cp.Parent;
				isShared = cp.IsShared;
			}*/

			if (attributes == null)
			{
				// WriteLine("Unknown " + element.FullName);
				continue;
			}
			string endpoint = null;
			string useName = null;
			foreach (CodeElement attr in attributes)
			{
				if (attr.Kind != vsCMElement.vsCMElementAttribute || attr.FullName != "System.ComponentModel.DefaultValueAttribute") continue;
				var ata =(CodeAttribute) attr;
				var val = ata.Value.ToString();
				if (val.StartsWith("\""))
					val = val.Substring(1, val.Length - 2);
				if (val.StartsWith("API", StringComparison.OrdinalIgnoreCase)) {
					var parts = val.Split(':');

					if (parts.Length >= 2)
					{
						useName = endpoint = parts[1];
					}
					else
					{
						endpoint = parentType.FullName.Replace(".", "_") + "_" + element.Name;
						useName = element.Name;
					}

					if (parts.Length >= 3)
						useName = parts[2];
				}
			}
			if (endpoint != null)
			{
				if (parentType.Kind != vsCMElement.vsCMElementClass && !isShared) {
					WriteLine("ERR Instance method " + element.FullName + " declared on value type " + parentType.FullName);
					continue;
				}

				KeyValuePair<string, CodeFunction> curr;
				if (!endpointMap.TryGetValue(endpoint, out curr))
					endpointMap.Add(endpoint, new KeyValuePair<string, CodeFunction>(useName, (CodeFunction) element));
				else
					WriteLine("ERR trying to replace endpoint " + endpoint + "=>" + curr.Value.FullName + " with " + element.FullName);
			}
		}
    }
	
	var apiTypes = new Dictionary<string, ApiBaseType>();

	{
		var apiTransmitTypes = new HashSet<CodeType>();

		foreach (var kv in endpointMap)
		{
			var cf = kv.Value.Value;
			if (!cf.IsShared)
				apiTransmitTypes.Add((CodeType) cf.Parent);

			ApiBaseType endpointsFor;
			var parentType = (CodeType) cf.Parent;
			if (!apiTypes.TryGetValue(parentType.FullName, out endpointsFor))
				apiTypes.Add(parentType.FullName, endpointsFor = new ApiBaseType(parentType));
			new ApiFunction(endpointsFor, kv.Key, cf, kv.Value.Key);

			foreach (CodeElement el in cf.Parameters)
			if (el.Kind == vsCMElement.vsCMElementParameter)
			{
				CodeParameter p = (CodeParameter) el;
				var pt = p.Type.CodeType;
				if (!apiTypes.ContainsKey(pt.FullName))
					apiTypes.Add(pt.FullName, new ApiBaseType(pt));
			}

			{
				var pt = cf.Type.CodeType;
				if (!apiTypes.ContainsKey(pt.FullName))
					apiTypes.Add(pt.FullName, new ApiBaseType(pt));
			}
		}
	}

	foreach (var type in apiTypes.Values)
	foreach (var endpoint in type.Endpoints.Values)
	{
		var cf = endpoint.Function;
		var retType = apiTypes[cf.Type.CodeType.FullName].WireTypeSimple;
		var isVoid = !endpoint.ReturnsValue;
		var sb = new StringBuilder();
		sb.Append(isVoid ? "Action" : "Func");
		bool first = true;
		if (!cf.IsShared)
		{
			first = false;
			sb.Append("<");
			sb.Append(type.WireTypeSimple);
		}
		foreach (CodeParameter param in cf.Parameters)
		{
			if (!first)
				sb.Append(", ");
			else
				sb.Append("<");
			first = false;

			sb.Append(apiTypes[param.Type.CodeType.FullName].WireTypeSimple);
		}
		if (!isVoid)
		{
			if (!first)
				sb.Append(", ");
			else
				sb.Append("<");
			first = false;
			sb.Append(retType);
		}
		if (!first)
			sb.Append(">");
		endpoint.DelegateType = sb.ToString();
	}
#>

using System;
using System.Collections.Generic;
using System.Reflection;
using Sandbox.ModAPI;

namespace DefenseShields
{

	public class ApiServer
	{
		private const long Channel = <#=YourChannel#>;
		private static readonly Dictionary<string, Delegate> _endpoints;

		static ApiServer()
		{
			_endpoints = new Dictionary<string, Delegate>
			{
<#
	foreach (var type in apiTypes.Values)
	foreach (var endpoint in type.Endpoints.Values)
	{
		var cf = endpoint.Function;
		var sb = new StringBuilder();
		sb.Append("new ").Append(endpoint.DelegateType).Append("(");
		sb.Append("(");
		{ // sig
			var first = true;
			if (!cf.IsShared)
			{
				first = false;
				sb.Append("@this");
			}
			foreach (CodeParameter param in cf.Parameters)
			{
				if (!first)
					sb.Append(", ");
				first = false;
				sb.Append(param.Name);
			}
		}
		sb.Append(") => ");
		{ // call
			if (cf.IsShared)
				sb.Append(type.Type.FullName);
			else if (type.WireType != type.Type)
				sb.Append("((").Append(type.Type.FullName).Append(") @this)");
			else
				sb.Append("@this");
			sb.Append(".").Append(cf.Name).Append("(");
			bool first = true;
			foreach (CodeParameter param in cf.Parameters)
			{
				if (!first)
					sb.Append(", ");
				first = false;

				var pt = apiTypes[param.Type.CodeType.FullName];
				if (pt.WireType != pt.Type)
					sb.Append("(").Append(pt.Type.FullName).Append(") ");
				sb.Append(param.Name);
			}
			sb.Append("))");
		}
#>
				["<#= endpoint.Endpoint #>"] = <#= sb.ToString() #>,
<#
	}
#>
			};
		}

		/// <summary>
		/// Is the API ready to be serve
		/// </summary>
		public static bool IsReady { get; private set; }

		private static void HandleMessage(object o)
		{
			if ((o as string) == "ApiEndpointRequest")
				MyAPIGateway.Utilities.SendModMessage(Channel, _endpoints);
		}

		private static bool _isRegistered;

		/// <summary>
		/// Prepares the client to receive API endpoints and requests an update.
		/// </summary>
		public static void Load()
		{
			if (!_isRegistered)
			{
				_isRegistered = true;
				MyAPIGateway.Utilities.RegisterMessageHandler(Channel, HandleMessage);
			}
			IsReady = true;
			MyAPIGateway.Utilities.SendModMessage(Channel, _endpoints);
		}


		/// <summary>
		/// Unloads all API endpoints and detaches events.
		/// </summary>
		public static void Unload()
		{
			if (_isRegistered)
			{
				_isRegistered = false;
				MyAPIGateway.Utilities.UnregisterMessageHandler(Channel, HandleMessage);
			}
			IsReady = false;
			MyAPIGateway.Utilities.SendModMessage(Channel, new Dictionary<string, Delegate>());
		}
	}

	public class ApiClient
	{
		private const long Channel = <#=YourChannel#>;
<#
	foreach (var type in apiTypes.Values)
	foreach (var endpoint in type.Endpoints.Values)
	{
#>
		private static <#= endpoint.DelegateType #> _endpoint<#= endpoint.Endpoint #>;
<#
	}
#>

		/// <summary>
		/// Is the API ready to be used
		/// </summary>
		public static bool IsReady { get; private set; }

		private static void HandleMessage(object o)
		{
			var dict = o as IReadOnlyDictionary<string, Delegate>;
			if (dict == null)
				return;

			Delegate entry;
<#
	foreach (var type in apiTypes.Values)
	foreach (var endpoint in type.Endpoints.Values)
	{
#>
			dict.TryGetValue("<#=endpoint.Endpoint#>", out entry);
			_endpoint<#= endpoint.Endpoint #> = entry as <#= endpoint.DelegateType #>;
<#
	}
#>
			IsReady = true;
		}

		private static bool _isRegistered;

		/// <summary>
		/// Prepares the client to receive API endpoints and requests an update.
		/// </summary>
		public static void Load()
		{
			if (!_isRegistered)
			{
				_isRegistered = true;
				MyAPIGateway.Utilities.RegisterMessageHandler(Channel, HandleMessage);
			}
			if (!IsReady)
				MyAPIGateway.Utilities.SendModMessage(Channel, "ApiEndpointRequest");
		}


		/// <summary>
		/// Unloads all API endpoints and detaches events.
		/// </summary>
		public static void Unload()
		{
			if (_isRegistered)
			{
				_isRegistered = false;
				MyAPIGateway.Utilities.UnregisterMessageHandler(Channel, HandleMessage);
			}
			IsReady = false;
<#
	foreach (var type in apiTypes.Values)
	foreach (var endpoint in type.Endpoints.Values)
	{
#>
			_endpoint<#= endpoint.Endpoint #> = null;
<#
	}
#>
		}

<#

	foreach (var kv in apiTypes)
	{
		var type = kv.Value;
		if (type.Type == type.WireType) continue;
#>
		public struct <#= type.ClientSideWrapper #>
		{
			public readonly <#= type.WireType.FullName #> Handle;
			internal <#= type.ClientSideWrapper #>(<#= type.WireType.FullName #> handle)
			{
				Handle = handle;
			}
			
<#
		foreach (var endpoint in type.Endpoints.Values)
		{
			var cf = endpoint.Function;
			var sig = new StringBuilder();
			{
				sig.Append("public ");
				if (cf.IsShared)
					sig.Append("static ");
				sig.Append(apiTypes[cf.Type.CodeType.FullName].ClientSideWrapper).Append(" ");
				sig.Append(endpoint.SimpleName).Append("(");
				bool first = true;
				foreach (CodeParameter param in cf.Parameters)
				{
					if (!first)
						sig.Append(", ");
					first = false;

					sig.Append(apiTypes[param.Type.CodeType.FullName].ClientSideWrapper).Append(" ").Append(param.Name);
				}
				sig.Append(")");
			}
#>
			<#= sig.ToString() #>
			{
				if (_endpoint<#= endpoint.Endpoint #> == null)
					throw new NotSupportedException("Endpoint <#= endpoint.Endpoint #> has not been loaded");
<#
			if (!cf.IsShared)
			{
#>
				if (Handle == null)
					throw new NullReferenceException();
<#
			}
			var call = new StringBuilder();
			{
				if (endpoint.ReturnsValue)
					call.Append("return ");
				var returnType = apiTypes[cf.Type.CodeType.FullName];
				if (returnType.WireType != returnType.Type)
					call.Append("new ").Append(returnType.ClientSideWrapper).Append("(");
				call.Append("ApiClient._endpoint" + endpoint.Endpoint + "(");
				var first = true;
				if (!cf.IsShared)
				{
					first = false;
					call.Append("Handle");
				}
				foreach (CodeParameter param in cf.Parameters)
				{
					if (!first)
						call.Append(", ");
					first = false;

					var wire = apiTypes[param.Type.CodeType.FullName];
					call.Append(param.Name);
					if (wire.WireType != wire.Type)
						call.Append(".Handle");
				}
				call.Append(")");
				if (returnType.WireType != returnType.Type)
					call.Append(")");
				call.Append(";");
			}
#>
				<#= call.ToString() #>
			}

<#
		}
#>
		}
<#
	}
#>
	}

}


<#+
	const string YourNamespacePrefix = "DefenseShields";
	const long YourChannel = 12345;

	class ApiBaseType
	{
		public readonly Dictionary<string, ApiFunction> Endpoints = new Dictionary<string, ApiFunction>();
		public readonly Dictionary<string, ApiFunction> EndpointsBySimpleName = new Dictionary<string, ApiFunction>();
		public readonly CodeType Type, WireType;
		public readonly string WireTypeSimple;

		public ApiBaseType(CodeType type)
		{
			Type = type;
			
			var exploreTypes = new Stack<CodeType>();
			exploreTypes.Push(type);
			WireType = null;
			while (exploreTypes.Count > 0) {
				var tmp = exploreTypes.Pop();
				if (!tmp.FullName.StartsWith(YourNamespacePrefix)) {
					WireType = tmp;
					break;
				}
				foreach (CodeType baseType in tmp.Bases)
					exploreTypes.Push(baseType);
			}

			string simpleName;
			if (simpleTypes.TryGetValue(WireType.FullName, out simpleName))
				WireTypeSimple = simpleName;
			else
				WireTypeSimple = WireType.FullName;

			if (WireType != Type)
				ClientSideWrapper = type.FullName.Substring(YourNamespacePrefix.Length + 1).Replace(".", "_");
			else 
				ClientSideWrapper = WireTypeSimple;
		}

		public readonly string ClientSideWrapper;
	}

	class ApiFunction
	{
		public readonly ApiBaseType BaseType;
		public readonly CodeFunction Function;
		public readonly string Endpoint;
		public readonly string SimpleName;

		public bool ReturnsValue => Function.Type.CodeType.FullName != "System.Void";

		public string DelegateType;

		public ApiFunction(ApiBaseType baseType, string endpoint, CodeFunction func, string simpleName)
		{
			BaseType = baseType;
			BaseType.Endpoints.Add(endpoint, this);
			BaseType.EndpointsBySimpleName.Add(simpleName, this);
			Function = func;
			SimpleName = simpleName;
			Endpoint = endpoint;
		}
	}

	static Dictionary<string,string> simpleTypes = new Dictionary<string, string>()
        {
            {"System.Byte", "byte"},
            {"System.SByte", "sbyte"},
            {"System.Int16", "short"},
            {"System.Int32", "int"},
            {"System.Int64", "long"},
            {"System.UInt16", "ushort"},
            {"System.UInt32", "uint"},
            {"System.UInt64", "ulong"},
            {"System.Single", "float"},
            {"System.Double", "double"},
            {"System.String", "string"},
			{"System.Void", "void"}
		};
#>